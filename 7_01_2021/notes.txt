1. I find it important and very helpful to think about the types of things. That is, giving even/oddness of elements in a single group G amounts to giving a homomorphism—read, function—f: G —> Z/2Z. All this really allows you to do is distinguish between different elements of G in perhaps a somewhat efficient way. For instance, 0 is not 1 in Z/2Z!

2. On the other hand, one can imagine giving a functor F: Groups —> Set that assigns a group G to the set Hom(G,Z/2Z) of all group homomorphisms from G to the cyclic group Z/2Z on two elements. This in some sense asks you to consider the set of all ways you can assign even/odd to all groups in some compatible way. In particular, this allows you to perhaps distinguish between groups in an efficient way: Z/3Z is not the same as Z/2Z, for instance!

3. In particular, it is the latter process that allows you to distinguish between complicated things using simpler invariants. But even that may come in flavours of varying complexity. That is, consider the process of assigning and extracting invariants to, say, topological spaces. This is often a rule that allows you to assign to any topological space T some other object inv(T), where inv(T) is hopefully something easier or more concrete. The only requirement for something to be an invariant is that if S and T are two topological spaces which are homeomorphic—or perhaps some other notion of equivalence…!—then you better have inv(S) = inv(T).

For instance, your inv(T) might be the topological Euler characteristic of T, or else it might be something more sophisticated, like the fundamental group of T. In the first case, you have a rule which might be thought of as a function 
	χ: Ob(Top) —> 𝐙 
from the set of (objects in the category of) topological spaces; in the second case, you have a rule which might be thought of as a functor
	π₁: Top —> Group
from the category of topological spaces to the category of groups.

4. A presheaf on a category C is another name for a contravariant functor F: C —> Set. As you pointed out, the prefix pre is meant to signify that upon adding more requirements on F, we have some object we might call a sheaf. A sheaf is a presheaf in which we can ``glue'' values of F together. But to make sense of that, you have to specify what this glueing is supposed to mean. Let’s talk about that below.

5. A fun exercise toward diagrammatics would be to try to prove some basic things in category theory using just properties of diagrams. Namely, one can formulate many results in category theory by saying that such and such is a universal thing. See the page on universal properties. Two examples to come below.

Some things to think about:

A. Think about some examples of invariants you can assign to things, say on spaces, groups, etc. Make sense of them as functions, functors, etc. To begin, here are some suggestions:
	- the determinant of a matrix, 
	- the characteristic polynomial of a matrix, 
	- the set of spanning trees of a graph, 
	- the fundamental group of a graph, 
	- the number of connected components of a topological space, 
	- the set of connected components of a topological space,
	- ...

A matrix can correspond to a morphism of vector spaces.
There's a property of determinants, that they commute with matrix product. det(AB)=det(A)det(B) 
Is there a category where composition of arrows corresponds to multiplication, so that determinant forms a functor?

A little googling leads me to Fernando Muro,
https://personal.us.es/fmuro/files/slides/pontevedra.pdf
who gives Deligne '87 
(https://publications.ias.edu/sites/default/files/Number58.pdf)
as the reference associated with this definition:

Let E be an abelian or exact category and P a Picard groupoid.
A determinant is a functor det: E^iso −→ P together with an additivity isomorphism

det(∆): det(B/A) ⊗ det(A) −→ det(B)

for each short exact sequence ∆ = A->B->B/A in E satisfying naturality, associativity and commutativity.

Okay.
1. What's an abelian category?
2. What's an exact category?
3. What's a Picard groupoid?

I think I have a little idea of what "short exact sequence" means.
One of the obstacles that seems obvious in category theory is:
why is everything unary?
Surely you have some standard way to do binary or n-ary operations around here?

If you take a small square (the set [0, 1] x [0, 1] in the real plane, maybe),
and first, squash it linearly flat to a line segment (the set [0, 1] x {0}),
and, second, squash that line linearly flat to the origin (the set {(0, 0)}),
then you've squashed to zero in the second step exactly the image of the first move,
and this story seems to be ``about'' products, or quotients, or coordinates or something,
while still only mentioning (unary) transformations. 

If you're categorifying the idea that ``the determinant of a product of matrices is the product of the determinants of the matrices`` then I think it seems moderately plausible to say
det(A) * det(B) = det(C) for all short exact sequences C -> B -> A

The other standard example of a short exact sequence is
Z -> Z -> Z/2Z
The way I understand this, you're saying that you can explain numbers as a two dimensional grid,
which is Z/2Z on one axis (the last bit in the binary representation), and Z on the other axis.

B. Towards making sense of a sheaf. Let X be your favourite topological space. Let C be the category whose objects are the open subsets of X, and whose arrows are inclusion relations. That is, given two open subsets U and V of X, viewed as objects of C, 
	
Hom_C(U,V) is empty if U is not contained in V, and is a single arrow if U is contained in V.

Think about what the data of a presheaf amounts to here. See if you can carefully formulate what it ought to mean to be able to glue values of a presheaf. (Think of covering an open set with smaller opens, specifying something on each of the smaller opens so that things are equal on overlaps. Think also of the triangle Escher-esque example we talked about!)

There are ideas of limits and colimits, pullbacks and pushouts in category theory,
and they correspond to kinds of intersections and unions that you might think about if
you were thinking in Set.




D. Something I came across some time ago that you might enjoy reading, if you have not seen this already: https://jneem.github.io/merging/.

I think highly of Benjamin Pierce, who I think is comfortable or familiar with category theory,
among other things. He has a research project on file synchronization 
https://www.cis.upenn.edu/~bcpierce/papers/index.shtml#Synchronization
and the most recent paper in this project is pretty awesome:
https://dl.acm.org/doi/10.1145/3341699
There's a video of a presentation of it here:
https://www.youtube.com/watch?v=VtpFyPdcDsQ

As usual, let me know if you have questions, or things you want me to look at before we meet again next week!

Happy weekend!
Raymond
