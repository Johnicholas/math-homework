



4. Look it up in nlab! https://ncatlab.org/nlab/show/binomial+theorem#combinatorial_interpretation





What is that thing about I and N - I?
Each of the summands on the right hand side of the binomial theorem seems to correspond to a (ordered) subset of N.

If we have binary products,
then we 



We have a pair of two things, the left hand side is tagged with either `A' or `B',
while the right hand side is tagged with a whole index datatype.
We can do an isomorphism, where we first view the tags (and construe all the tags together as a single thing),
and then, given that, we know what we have (and we view that all together as a single thing).

The fancy tags are something like strings of `A' or `B'.
The thing that we do with them is transform
1. A pair of a function from I to A and a function from (N - I) to B to a function from N to (A - B)

Let's talk about fancy coproducts.
A binary coproduct, we talk about 1 and 2 without discussing what kind of thing they are,
or where they live, or what operations are possible on them.
A fancy coproduct, we use big-sum notation, and we need to discuss what kind of thing the
indexes are, or what operations are possible on them.





A generic fancy coproduct, viewed from the outside,
looks like a map from the index set to the coproduct of the terms,
with some guarantees.

If you have an element of the fancy coproduct (a map 1 \to FancyCoproduct)
then you compose to get an element of the index (a map 1 \to Index).

If you ``recognize'' that element of the index, you can use a guarantee that you might have lying around
to obtain a bijection between the preimage of that element and some nicely structured set.

What happens if you take a binary product with a binary coproduct on the one side, and a fancy coproduct on the other side?

Well, what happens if you take a binary product with a binary coproduct on the one side, and a binary coproduct on the other side?
(A + B) * (C + D)
Elements of this set are pairs.
The left side of the pairs are `tagged' with `A' or `B', while the right hand side are tagged with `C' or `D'.
What can we do with this?





In writing a proof, `turning over a card' corresponds to analysis by cases;
In writing a program, `turning over a card' corresponds to pattern matching or definition by cases.

In writing a proof, `


In this case, what we can do that's maybe a categorification of distribution of multiplication is
to inspect the tag of the first element of the pair, and inspect the tag of the second element of the pair,
and pair up the values.
Pair (Union {A, B} A B) (Union {C, D} C D)
= Union {AC, AD, BC, BD} (Pair A C) (Pair A D) (Pair B C) (Pair B D) 

What is the universal property of this resulting object?
Well, it's a coproduct, so:
IT = Union {AC, AD, BC, BD} (Pair A C) (Pair A D) (Pair B C) (Pair B D) 
has an injection function i from the index set {AC, AD, BC, BD} \to maps from Pair (A + B) (C + D) to IT,
such that any other pair of 
1. a coproduct-like object Y, with
2. with an injection-like function f from {AC, AD, BC, BD} \to maps from from Pair (A + B) (C + D) to IT
then
there is a unique morphism from IT to Y
such that
i {AC, AD, BC, BD} ; f = f {AC, AD, BC, BD}













